// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/form/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/upassed/upassed-form-service/internal/repository/model"
)

// FormRepository is a mock of Repository interface.
type FormRepository struct {
	ctrl     *gomock.Controller
	recorder *FormRepositoryMockRecorder
}

// FormRepositoryMockRecorder is the mock recorder for FormRepository.
type FormRepositoryMockRecorder struct {
	mock *FormRepository
}

// NewFormRepository creates a new mock instance.
func NewFormRepository(ctrl *gomock.Controller) *FormRepository {
	mock := &FormRepository{ctrl: ctrl}
	mock.recorder = &FormRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *FormRepository) EXPECT() *FormRepositoryMockRecorder {
	return m.recorder
}

// ExistsByNameAndTeacherUsername mocks base method.
func (m *FormRepository) ExistsByNameAndTeacherUsername(ctx context.Context, formName, teacherUsername string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsByNameAndTeacherUsername", ctx, formName, teacherUsername)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistsByNameAndTeacherUsername indicates an expected call of ExistsByNameAndTeacherUsername.
func (mr *FormRepositoryMockRecorder) ExistsByNameAndTeacherUsername(ctx, formName, teacherUsername interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsByNameAndTeacherUsername", reflect.TypeOf((*FormRepository)(nil).ExistsByNameAndTeacherUsername), ctx, formName, teacherUsername)
}

// Save mocks base method.
func (m *FormRepository) Save(ctx context.Context, form *domain.Form) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, form)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *FormRepositoryMockRecorder) Save(ctx, form interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*FormRepository)(nil).Save), ctx, form)
}
